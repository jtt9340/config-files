config:
  backup: true
  banner: false
  create: true
  dotpath: .
  workdir: templated
  keepdot: false
  link_on_import: link
  cmpignore:
  - '*/.DS_Store'
  - '*.swp'
  upignore:
  - '*/.DS_Store'
  - '*.swp'
  instignore:
  - '*/.DS_Store'
  - '*.swp'
  func_file:
  - re.deadc0de.dotdrop/funcs.py
  filter_file:
  - re.deadc0de.dotdrop/filters.py
  minversion: 1.10.3
variables:
  vimdir: >-
    {{@@
      '~/Library/Application Support/org.vim.Vim' if profile == 'macos'
      else env['XDG_CONFIG_HOME'] + '/vim' if env['XDG_CONFIG_HOME'] is string
      else '~/.config/vim' if exists('~/.config/vim')
      else '~/.vim'
    @@}}
  ripgrep_config_path: >-
    {{@@
      env['RIPGREP_CONFIG_PATH'] if env['RIPGREP_CONFIG_PATH'] is string
      else '~/Library/Application Support/com.github.burntsushi.Ripgrep/ripgreprc'
    if profile == 'macos'
      else env['XDG_CONFIG_HOME'] + '/ripgreprc' if env['XDG_CONFIG_HOME'] is string
      else '~/.config/ripgreprc'
    @@}}
  zdotdir: >-
    {{@@
      '~/Library/Application Support/net.sourceforge.Zsh' if profile == 'macos'
      else env['XDG_CONFIG_HOME'] + '/zsh' if env['XDG_CONFIG_HOME'] is string
      else '~/.zsh'
    @@}}
dynvariables:
  bat_config_path: command -v bat >/dev/null && bat --config-file || echo $HOME/.bat-not-installed
  # The path to the Vim binary, or else nano if Vim is not installed
  editor_exe: which vim || which nano
  # The path to the Bat binary
  bat_exe: which bat
  # The path to the touch binary
  touch_exe: which touch
  # The path to the trash binary
  trash_exe: which trash || echo 'trash-cli not installed'
actions:
  zshenv: ln -i -s {{@@ _dotfile_abs_dst @@}}/.zshenv ~/.zshenv
dotfiles:
  d_vim:
    src: org.vim.Vim
    dst: '{{@@ vimdir @@}}'
    link: link_children
    upignore:
    - .netrwhist*
    - backup
    - swap
    - undo
    - viminfo
    cmpignore:
    - .netrwhist*
    - backup
    - swap
    - undo
    - viminfo
  f_org.dystroy.broot_conf.toml:
    src: org.dystroy.broot/conf.toml
    dst: "{{@@ '~/Library/Preferences/org.dystroy.broot/conf.toml' if profile == 'macos'\
      \ else '~/.config/broot/conf.toml' @@}}"
    link: absolute
  f_nixpkgs_config.nix:
    src: org.nixos.Nix/config.nix
    dst: ~/.config/nixpkgs/config.nix
  f_micro_settings.json:
    src: io.github.micro-editor/settings.json
    dst: ~/.config/micro/settings.json
  f_npmrc:
    src: com.npmjs.Npm/npmrc
    dst: ~/Library/Application Support/com.npmjs.Npm/npmrc
    link: absolute
  d_zdotdir:
    src: net.sourceforge.Zsh
    dst: '{{@@ zdotdir @@}}'
    link: link_children
    cmpignore:
    - .zcompdump*
    - .zsh_history
    - .zsh_sessions
    - .zshdb_hist
    - zsh_plugins*.zsh
    - ignored-users.zsh*
    # See comments in .gitignore regarding these next two ignore patterns
    - zfunc/_*
    - '!zfunc/_python-workon-cwd'
    - bookmarks
    - zgen*
    - z.txt
    upignore:
    - .zcompdump*
    - .zsh_history
    - .zsh_sessions
    - .zshdb_hist
    - zsh_plugins*.zsh
    - ignored-users.zsh*
    - bookmarks
    - zgen*
    - z.txt
    actions:
    - zshenv
  f_ripgreprc:
    src: com.github.burntsushi.Ripgrep/ripgreprc
    dst: '{{@@ ripgrep_config_path @@}}'
    link: absolute
  f_bat_config:
    src: com.github.sharkdp.Bat/config
    dst: "{{@@ '~/Library/Application Support/bat/config' if profile == 'macos' else\
      \ bat_config_path @@}}"
    link: absolute
  f_git_config:
    src: com.git-scm.Git/config
    dst: >-
      {{@@
        '~/.gitconfig' if profile == 'macos'
        else env['XDG_CONFIG_HOME'] + '/git/config' if env['XDG_CONFIG_HOME'] is string
        else '~/.config/git/config'
      @@}}
    link: absolute
profiles:
  macos:
    dotfiles:
    - f_org.dystroy.broot_conf.toml
    - d_vim
    - f_npmrc
    - d_zdotdir
    - f_ripgreprc
    - f_bat_config
    - f_git_config
  linux:
    dotfiles:
    - d_vim
    - f_ripgreprc
    - f_org.dystroy.broot_conf.toml
    - d_zdotdir
    - f_bat_config
    - f_git_config
  nixos:
    dotfiles:
    - f_org.dystroy.broot_conf.toml
