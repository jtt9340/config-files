##############################################################################################################################
# This .zshrc requires Zgen, a program that makes it easy to manage Zsh plugins. If it is not installed, it will be installed.
##############################################################################################################################
[[ -d $ZGEN_DIR || -d $ZDOTDIR/zgen || -d $HOME/.zgen ]] || {
  [[ -z "$ZGEN_DIR" ]] && {
    [[ -n "$ZDOTDIR" ]] && ZGEN_DIR="${ZDOTDIR}/zgen" || ZGEN_DIR="${HOME}/.zgen"
  }
  git clone https://github.com/tarjoilija/zgen.git $ZGEN_DIR 
}

#############################
# These are part of Oh-My-Zsh
#############################
# Display little red dots while waiting for Zsh to fill in a completion
COMPLETION_WAITING_DOTS=true
# This probably does something useful
DISABLE_UNTRACKED_FILES_DIRTY=true
# Make hyphens and underscores indistuinguishable completion-wise
HYPHEN_INSENSITIVE=true

###################################################################################################################
# Source the init script created by zgen; this loads all the plugins specified in the "if ! zgen saved" block below 
###################################################################################################################
source "${ZGEN_DIR}/zgen.zsh"

######################################################################################################################
# If the init script exists, skip the following. Otherwise, we will download and use the following themes/plugins/etc.
######################################################################################################################
if ! zgen saved; then
  # Per the zgen documentation: "It's a good idea to load the base components before specifying any plugins"
  zgen oh-my-zsh

  # Specify plugins part of oh-my-zsh
  zgen oh-my-zsh plugins/git
  zgen oh-my-zsh plugins/cargo

  # So when you use `zsh-users/zsh-syntax-highlighting` it needs to be
  # sourced last. I'm not sure if that's the same for fast-syntax-highlighing,
  # but might as well adhere to that.
  zgen loadall <<EOPLUGINS
    MichaelAquilina/zsh-you-should-use
    agkozak/zsh-z
    unixorn/autoupdate-zgen
    zsh-users/zsh-autosuggestions
    zsh-users/zsh-history-substring-search
    zdharma/fast-syntax-highlighting
EOPLUGINS

  # Set the theme
  # TODO: figure out why this theme only sort-of works when using 'zgen load', for now I am resorting back to
  # normal source
  # By 'sort-of works' I mean the variables declared with 'typeset +H' at the top of the joeys-avit file aren't
  # acutally present ðŸ¤” 
  # zgen load $ZDOTDIR/joeys-avit

  # Generate the init script from plugins above
  zgen save
fi

# See above TODO
source $ZDOTDIR/joeys-avit.zsh-theme

############################
# Enabling shell completions
############################
fpath+=$ZDOTDIR/.zfunc

# Enabling shell completions for Homebrew
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

  autoload -Uz compinit
  compinit
fi

#############
# Spell check
#############
setopt correct
export SPROMPT="Correct $fg[red]%R$reset_color to $fg[green]%r$reset_color?
	[Yes, No, Abort, Edit] "

#########
# Aliases
#########
# For quickly editing configuration files
alias zshconfig="${EDITOR:-vim} ${ZDOTDIR:-$HOME}/.zshrc"
alias vimconfig="${EDITOR:-vim} ${XDG_CONFIG_HOME:-$HOME/Library/Preferences}/org.vim.Vim/vimrc"
alias brootconfig="${EDITOR:-vim} ${XDG_CONFIG_HOME:-$HOME/Library/Preferences}/org.dystroy.broot/conf.toml"

# ls aliases
alias lsdl='lsd -lF --date relative'
alias lsda='lsd -aF'
alias lsdla='lsd -laF --date relative'
alias ldot='ls -d .*'
alias lab='ls -AbFG'
alias tree='br --cmd :pt'
alias ltree='lsd --tree'

# These aliases are graciously taken from the Prezto Homebrew plugin; I have decided not to add the plugin to the above "if
# ! zgen saved" block becuase that would require sourcing Prezto and adding a lot of code to my shell startup that I
# wouldn't use
alias brewc='brew cleanup' # cleans outdated brews and their cached archives
alias brewi='brew install' # installs a formula
alias brewL='brew leaves' # lists installed formulae that are not dependencies of another installed formula
alias brewl='brew list' # lists installed formulae
alias brewo='brew outdated' # lists brews which have an update available
alias brews='brew search' # searched for a formula
alias brewu='brew upgrade' # updates and upgrdes Homebrew packages and formulae
alias brewx='brew uninstall' # uninstalls a formula

# brew cask
alias cask='brew cask'
alias caskc='hb_deprecated brew cask cleanup' # same as brew cleanup
alias caski='brew cask install' # installs a cask
alias caskl='brew cask list' # lists installed casks
alias casko='brew cask outdated' # lists casks which have an update available
alias casks='hb_deprecated brew cask search' # same as brew search 
alias caskx='brew cask uninstall' # uninstalls a cask

# Global aliases - proceed with caution
alias -g C='| wc -l'
alias -g H='| head'
alias -g T='| tail'
alias -g L='| less'
alias -g 'TRUE?'='&& echo true || echo false'

# Make some commands more verbose
alias rm='rm -v'
alias mv='mv -v'
alias diff='diff -s'

###########
# Functions
###########
# User zsh-z as cd; first attempt to cd to the given directory, if that fails use zsh-z instead
function j {
  if [[ "$argv[1]" == "-"* ]]; then
    z "$@"
  else
    cd "$@" 2> /dev/null || z "$@"
  fi
  command ls -GF
}

# Used as a shim for deprecated Homebrew commands; taken from Prezto's Homebrew plugin
function hb_deprecated {
  local cmd="${@[3]}"
  local cmd_args="${@:4}"

  printf "'brew cask %s' has been deprecated, " "${cmd}"
  printf "using 'brew %s' instead\n" "${cmd}"

  command brew "${cmd}" "${=cmd_args}"
}

# Graciously taken from Prezto's OS X plugin; again I am not sourcing this plusing because it is easier to just copy
# the function source than include all the Prezto code, much of which I will not use.
#
# Displays macOS download history 
function lsdownloads {
  local db
  for db in ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV*; do
    grep -q 'LSQuarantineEvent' < <(sqlite3 "$db" .tables) &&
    sqlite3 "$db" 'SELECT LSQuarantineDataURLString FROM LSQuarantineEvent'
  done | sed '/^$/d'
}

# Also taken from Prezto's OS X plugin, this function removed macOS download history
function rmdownloads {
  local db
  for db in ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV*; do
    grep -q 'LSQuarantineEvent' < <(sqlite3 "$db" .tables) &&
    sqlite3 "$db" 'DELETE FROM LSQuarantineEvent; VACUUM'
  done
}

# Also taken from Prezto's OS X plugin, this function "deletes .DS_Store and __MACOSX cruft"
function rmmetadata {
  find "${@:-$PWD}" \( \
    -type f -name '.DS_Store' -o \
    -type d -name '__MACOSX' \
  \) -print0 | xargs -0 rm -rf
}

# Also taken from Prezto's OS X plugin, this function "prints the current Finder directory"
function pfd {
  osascript 2> /dev/null <<EOF
    tell application "Finder"
      return POSIX path of (target of first window as text)
    end tell
EOF
}

# Also taken from Prezto's OS X plugin, this function "prinst the current Finder selection"
function pfs {
  osascript 2>&1 <<EOF
    tell application "Finder" to set the_selection to selection
    if the_selection is not {}
      repeat with an_item in the_selection
        log POSIX path of (an_item as text)
      end repeat
    end if
EOF
}

###############
# Miscellaneous
###############
MANPATH="/usr/local/gnupg-2.2/share/man${MANPATH:+:$MANPATH}"

# Command-not-found functionality for Homebrew
HB_CNF_HANDLER="$(brew --prefix)/Homebrew/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
[ -f "$HB_CNF_HANDLER" ] && source "$HB_CNF_HANDLER"

# Broot
source /Users/josephterrito/Library/Preferences/org.dystroy.broot/launcher/bash/br
